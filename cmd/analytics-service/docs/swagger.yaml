basePath: /api
definitions:
  internal_product_models.Dislike:
    properties:
      disliked_at:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      user_id:
        type: integer
    type: object
  internal_product_models.Like:
    properties:
      id:
        type: integer
      liked_at:
        type: string
      product_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: securepassword123
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      dislikes:
        items:
          $ref: '#/definitions/internal_product_models.Dislike'
        type: array
      id:
        type: integer
      likes:
        items:
          $ref: '#/definitions/internal_product_models.Like'
        type: array
      name:
        type: string
      price:
        type: number
      purchase_count:
        type: integer
      updated_at:
        type: string
    type: object
  models.Purchase:
    properties:
      id:
        type: integer
      product_id:
        type: integer
      purchased_at:
        type: string
      user_id:
        type: integer
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: securepassword123
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8083
info:
  contact: {}
  description: API for collecting and retrieving analytics data.
  title: Analytics Service API
  version: "1.0"
paths:
  /analytics/products/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve analytics data for a specific product (likes, dislikes,
        purchases).
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get product analytics
      tags:
      - analytics :8083
  /analytics/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve analytics data for a specific user (total likes, dislikes,
        purchases).
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user analytics
      tags:
      - analytics :8083
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token.
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth :8084
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user with name, email, and password.
      parameters:
      - description: User to register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - auth :8084
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all products with pagination, including likes,
        dislikes, and purchase count.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of products per page
        in: query
        name: pageSize
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - products :8081
    post:
      consumes:
      - application/json
      description: Create a new product with name, description, price, and category.
      parameters:
      - description: Product to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products :8081
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products :8081
    get:
      consumes:
      - application/json
      description: Retrieve product information by product ID, including likes, dislikes,
        and purchase count.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products :8081
    put:
      consumes:
      - application/json
      description: Update product information by product ID (including category).
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update product information
      tags:
      - products :8081
  /recommendations/{user_id}/latest:
    get:
      consumes:
      - application/json
      description: Retrieve the most up-to-date recommended products for this user.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get the latest recommendation
      tags:
      - recommendations :8082
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users with pagination.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of users per page
        in: query
        name: pageSize
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users :8080
  /users/{id}:
    put:
      consumes:
      - application/json
      description: Update user information by user ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users :8080
  /users/{id}/actions:
    get:
      consumes:
      - application/json
      description: Retrieve all likes and dislikes of a user, with optional filtering
        by product ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID to filter
        in: query
        name: product_id
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user actions
      tags:
      - users :8080
  /users/{id}/dislike:
    post:
      consumes:
      - application/json
      description: User dislikes a product.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: query
        name: product_id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Dislike a product
      tags:
      - users :8080
  /users/{id}/like:
    post:
      consumes:
      - application/json
      description: User likes a product.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: query
        name: product_id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Like a product
      tags:
      - users :8080
  /users/{id}/purchase:
    post:
      consumes:
      - application/json
      description: User purchases a product.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: query
        name: product_id
        required: true
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Purchase a product
      tags:
      - users :8080
  /users/{id}/purchases:
    get:
      consumes:
      - application/json
      description: Retrieve a list of purchases made by the user with pagination.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of purchases per page
        in: query
        name: pageSize
        type: integer
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Purchase'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user purchases
      tags:
      - users :8080
swagger: "2.0"
